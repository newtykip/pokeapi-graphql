type Query {
    berries: Berries
    contests: Contests
    encounters: Encounters
    evolutions: Evolutions
    games: Games
    items: Items
    locations: Locations
    machines: Machines
    moves: Moves
    pokemon: Pokemon
}

scalar QueryType

type Berries {
    getBerry(query: QueryType!): Berry
    getFirmness(query: QueryType!): BerryFirmness
    getFlavor(query: QueryType!): BerryFlavor
}

type Contests {
    getType(query: QueryType!): ContestType
    getEffect(id: Int!): ContestEffect
    getSuperEffect(id: Int!): SuperContestEffect
}

type Encounters {
    getMethod(query: QueryType!): EncounterMethod
    getCondition(query: QueryType!): EncounterCondition
    getConditionValue(query: QueryType!): EncounterConditionValue
}

type Evolutions {
    getChain(id: Int!): EvolutionChain
    getTrigger(query: QueryType!): EvolutionTrigger
}

type Games {
    getGeneration(query: QueryType!): Generation
    getPokedex(query: QueryType!): Pokedex
    getVersion(query: QueryType!): Version
    getVersionGroup(query: QueryType!): VersionGroup
}

type Items {
    getItem(query: QueryType!): Item
    getAttribute(query: QueryType!): ItemAttribute
    getCategory(query: QueryType!): ItemCategory
    getFlingEffect(query: QueryType!): ItemFlingEffect
    getPocket(query: QueryType!): ItemPocket
}

type Locations {
    getLocation(query: QueryType!): Location
    getLocationArea(query: QueryType!): LocationArea
    getPalParkArea(query: QueryType!): PalParkArea
    getRegion(query: QueryType!): Region
}

type Machines {
    getMachine(id: Int!): Machine
}

type Moves {
    getMove(query: QueryType!): Move
    getAilment(query: QueryType!): MoveAilment
    getBattleStyle(query: QueryType!): MoveBattleStyle
    getCategory(query: QueryType!): MoveCategory
    getDamageClass(query: QueryType!): MoveDamageClass
    getLearnMethod(query: QueryType!): MoveLearnMethod
    getTarget(query: QueryType!): MoveTarget
}

type Pokemon {
  getAbility(query: QueryType!): Ability
  getCharacteristic(id: Int!): Characteristic
  getEggGroup(query: QueryType!): EggGroup
  getGender(query: QueryType!): Gender
  getGrowthRate(query: QueryType!): GrowthRate
  getNature(query: QueryType!): Nature
  getPokeathlonStat(query: QueryType!): PokeathlonStat
  getPokemon(query: QueryType!): Pokemon
  getPokemonLocationAreas(query: QueryType!): LocationAreaEncounter
  getPokemonColor(query: QueryType!): PokemonColor
  getPokemonForm(query: QueryType!): PokemonForms
  getPokemonHabitat(query: QueryType!): PokemonHabitat
  getPokemonShape(query: QueryType!): PokemonShape
  getPokemonSpecies(query: QueryType!): PokemonSpecies
  getStat(query: QueryType!): Stat
  getType(query: QueryType!): Type
}

# Common Models

type Language {
    id: Int
    name: String
    official: Boolean
    iso639: String
    iso3166: String
    names: [Name]
}

type APIResource {
    url: String
}

type Description {
    description: String
    language: NamedAPIResource
}

type Effect {
    effect: String
    language: NamedAPIResource
}

type Encounter {
    minLevel: Int
    maxLevel: Int
    conditionValues: NamedAPIResource
    chance: Int
    method: NamedAPIResource
}

type FlavorText {
    flavorText: String
    language: NamedAPIResource
    version: NamedAPIResource
}

type GenerationGameIndex {
    gameIndex: Int
    generation: NamedAPIResource
}

type MachineVersionDetail {
    machine: APIResource
    versionGroup: NamedAPIResource
}

type Name {
    name: String
    language: NamedAPIResource
}

type NamedAPIResource {
    name: String
    url: String
}

type VerboseEffect {
    effect: String
    shortEffect: String
    language: NamedAPIResource
}

type VersionEncounterDetail {
    version: NamedAPIResource
    maxChance: Int
    encounterDetails: [Encounter]
}

type VersionGameIndex {
    gameIndex: Int
    version: NamedAPIResource
}

type VersionGroupFlavorText {
    text: String
    language: NamedAPIResource
    versionGroup: NamedAPIResource
}

# Berries

type Berry {
    id: Int
    name: String
    growthTime: Int
    maxHarvest: Int
    giftPower: Int
    size: Int
    smoothness: Int
    soilDryness: Int
    firmness: NamedAPIResource
    flavors: [BerryFlavorMap]
    item: NamedAPIResource
    giftType: NamedAPIResource
}

type BerryFlavorMap {
    potency: Int
    flavor: NamedAPIResource
}

type BerryFirmness {
    id: Int
    name: String
    berries: [NamedAPIResource]
    names: [Name]
}

type BerryFlavor {
    id: Int
    name: String
    berries: [FlavorBerryMap]
    contestType: NamedAPIResource
    names: [Name]
}

type FlavorBerryMap {
    potency: Int
    berry: NamedAPIResource
}

# Contests

type ContestType {
    id: Int
    name: String
    berryFlavor: NamedAPIResource
    names: [ContestName]
}

type ContestName {
    name: String
    color: String
    language: NamedAPIResource
}

type ContestEffect {
    id: Int
    appeal: Int
    jam: Int
    effectEntries: [Effect]
    flavorTextEntries: [FlavorText]
}

type SuperContestEffect {
    id: Int
    appeal: Int
    flavorTextEntries: [FlavorText]
    moves: [NamedAPIResource]
}

# Encounters

type EncounterMethod {
    id: Int
    name: String
    order: Int
    names: [Name]
}

type EncounterCondition {
    id: Int
    name: String
    names: [Name]
    values: [NamedAPIResource]
}

type EncounterConditionValue {
    id: Int
    name: String
    condition: NamedAPIResource
    names: [Name]
}

# Evolution

type EvolutionChain {
    id: Int
    babyTriggerItem: NamedAPIResource
    chain: ChainLink
}

type ChainLink {
    isBaby: Boolean
    species: NamedAPIResource
    evolutionDetails: [EvolutionDetail]
    evolvesTo: [ChainLink]
}

type EvolutionDetail {
    item: NamedAPIResource
    trigger: NamedAPIResource
    gender: Int
    heldItem: NamedAPIResource
    knownMove: NamedAPIResource
    knownMoveType: NamedAPIResource
    location: NamedAPIResource
    minLevel: Int
    minHappiness: Int
    minBeauty: Int
    minAffection: Int
    needsOverworldRain: Boolean
    partySpecies: NamedAPIResource
    partyType: NamedAPIResource
    relativePhysicalStats: Int
    timeOfDay: String
    tradeSpecies: NamedAPIResource
    turnUpsideDown: Boolean
}

type EvolutionTrigger {
    id: Int
    name: String
    names: [Name]
    pokemonSpecies: NamedAPIResource
}

# Games

type Generation {
    id: Int
    name: String
    abilities: [NamedAPIResource]
    names: [Name]
    mainRegion: NamedAPIResource
    moves: [NamedAPIResource]
    pokemonSpecies: [NamedAPIResource]
    types: [NamedAPIResource]
    versionGroups: [NamedAPIResource]
}

type Pokedex {
    id: Int
    name: String
    isMainSeries: Boolean
    descriptions: [Description]
    names: [Name]
    pokemonEntries: [PokemonEntry]
    region: NamedAPIResource
    versionGroups: [NamedAPIResource]
}

type PokemonEntry {
    entryNumber: Int
    pokemonSpecies: NamedAPIResource
}

type Version {
    id: Int
    name: String
    names: [Name]
    versionGroup: NamedAPIResource
}

type VersionGroup {
    id: Int
    name: String
    order: Int
    generation: NamedAPIResource
    moveLearnMethods: [NamedAPIResource]
    pokedexes: [NamedAPIResource]
    regions: [NamedAPIResource]
    versions: [NamedAPIResource]
}

# Items

type Item {
    id: Int
    name: String
    cost: Int
    flingPower: Int
    flingEffect: NamedAPIResource
    attributes: [NamedAPIResource]
    category: NamedAPIResource
    effectEntries: VerboseEffect
    flavorTextEntries: [VersionGroupFlavorText]
    gameIndices: [GenerationGameIndex]
    names: [Name]
    sprites: ItemSprites
    heldByPokemon: [ItemHolderPokemon]
    babyTriggerFor: APIResource
    machines: [MachineVersionDetail]
}

type ItemSprites {
    default: String
}

type ItemHolderPokemon {
    pokemon: NamedAPIResource
    versionDetails: [ItemHolderPokemonVersionDetail]
}

type ItemHolderPokemonVersionDetail {
    rarity: Int
    version: NamedAPIResource
}

type ItemAttribute {
    id: Int
    name: String
    items: [NamedAPIResource]
    names: [Name]
    descriptions: [Description]
}

type ItemCategory {
    id: Int
    name: String
    items: [NamedAPIResource]
    names: [Name]
    pocket: NamedAPIResource
}

type ItemFlingEffect {
    id: Int
    name: String
    effectEntries: [Effect]
    items: [NamedAPIResource]
}

type ItemPocket {
    id: Int
    name: String
    categories: [NamedAPIResource]
    names: [Name]
}

# Locations

type Location {
    id: Int
    name: String
    region: NamedAPIResource
    names: [Name]
    gameIndices: [GenerationGameIndex]
    areas: NamedAPIResource
}

type LocationArea {
    id: Int
    name: String
    gameIndex: Int
    encounterMethodRates: [EncounterMethodRate]
    location: NamedAPIResource
    names: [Name]
    pokemonEncounters: [PokemonEncounter]
}

type EncounterMethodRate {
    encounterMethod: NamedAPIResource
    versionDetails: EncounterVersionDetails
}

type EncounterVersionDetails {
    rate: Int
    version: NamedAPIResource
}

type PokemonEncounter {
    pokemon: NamedAPIResource
    versionDetails: VersionEncounterDetail
}

type PalParkArea {
    id: Int
    name: String
    names: [Name]
    pokemonEncounters: [PalParkEncounterSpecies]
}

type PalParkEncounterSpecies {
    baseScore: Int
    rate: Int
    pokemonSpecies: NamedAPIResource
}

type Region {
    id: Int
    locations: NamedAPIResource
    name: String
    names: [Name]
    mainGeneration: NamedAPIResource
    pokedexes: [NamedAPIResource]
    versionGroups: [NamedAPIResource]
}

# Machines

type Machine {
    id: Int
    item: NamedAPIResource
    move: NamedAPIResource
    versionGroup: NamedAPIResource
}

# Moves

type Move {
    id: Int
    name: String
    accuracy: Int
    effectChance: Int
    pp: Int
    priority: Int
    power: Int
    contestCombos: ContestComboSets
    contestType: NamedAPIResource
    contestEffect: APIResource
    damageClass: NamedAPIResource
    effectEntries: [VerboseEffect]
    effectChanges: [AbilityEffectChange]
    flavorTextEntries: [MoveFlavorText]
    generation: NamedAPIResource
    machines: [MachineVersionDetail]
    meta: MoveMetaData
    names: [Name]
    pastValues: [PastMoveStatValues]
    statChanges: [MoveStatChange]
    superContestEffect: APIResource
    target: NamedAPIResource
    type: NamedAPIResource
}

type ContestComboSets {
    normal: ContestComboDetail
    super: ContestComboDetail
}

type ContestComboDetail {
    useBefore: NamedAPIResource
    useAfter: NamedAPIResource
}

type MoveFlavorText {
    flavorText: String
    language: NamedAPIResource
    versionGroup: NamedAPIResource
}

type MoveMetaData {
    ailment: NamedAPIResource
    category: NamedAPIResource
    minHits: Int
    maxHits: Int
    minTurns: Int
    maxTurns: Int
    drain: Int
    healing: Int
    critRate: Int
    ailmentChance: Int
    flinchChance: Int
    statChance: Int
}

type MoveStatChange {
    change: Int
    stat: NamedAPIResource
}

type PastMoveStatValues {
    accuracy: Int
    effectChance: Int
    power: Int
    pp: Int
    effectEntries: [VerboseEffect]
    type: NamedAPIResource
    versionGroup: NamedAPIResource
}

type MoveAilment {
    id: Int
    name: String
    moves: [NamedAPIResource]
    names: [Name]
}

type MoveBattleStyle {
    id: Int
    name: String
    names: [Name]
}

type MoveCategory {
    id: Int
    name: String
    moves: [NamedAPIResource]
    descriptions: [Description]
}

type MoveDamageClass {
    id: Int
    name: String
    descriptions: [Description]
    moves: [NamedAPIResource]
    names: [Name]
}

type MoveLearnMethod {
    id: Int
    name: String
    descriptions: [Description]
    names: [Name]
    versionGroups: NamedAPIResource
}

type MoveTarget {
    id: Int
    name: String
    descriptions: [Description]
    moves: [NamedAPIResource]
    names: [Name]
}

# Pokemon

type Ability {
  id: Int
  name: String
  isMainSeries: Boolean
  generation: NamedAPIResource
  names: [Name]
  effectEntries: [VerboseEffect]
  effectChanges: [AbilityEffectChange]
  flavorTextEntries: [AbilityFlavorText]
  pokemon: [AbilityPokemon]
}

type AbilityEffectChange {
    effectEntries: [Effect]
    versionGroup: NamedAPIResource
}

type AbilityFlavorText {
  flavorText: String
  language: NamedAPIResource
  versionGroup: NamedAPIResource
}

type AbilityPokemon {
  isHidden: Boolean
  slot: Int
  pokemon: NamedAPIResource
}

type Characteristic {
  id: Int
  geneModulo: Int
  possibleValues: [Int]
}

type EggGroup {
  id: Int
  name: String
  names: [Name]
  pokemonSpecies: NamedAPIResource
}

type Gender {
  id: Int
  name: String
  pokemonSpeciesDetails: [PokemonSpeciesGender]
  requiredForEvolution: [NamedAPIResource]
}

type PokemonSpeciesGender {
  rate: Int
  pokemonSpecies: NamedAPIResource
}

type GrowthRate {
  id: Int
  name: String
  formula: String
  descriptions: [Description]
  levels: [GrowthRateExperienceLevel]
  pokemonSpecies: [NamedAPIResource]
}

type GrowthRateExperienceLevel {
  level: Int
  experience: Int
}

type Nature {
  id: Int
  name: String
  decreasedStat: NamedAPIResource
  increasedStat: NamedAPIResource
  hatesFlavor: NamedAPIResource
  likesFlavor: NamedAPIResource
  pokeathlonStatChanges: [NatureStatChange]
  moveBattleStylePreferences: [MoveBattleStylePreference]
  names: [Name]
}

type NatureStatChange {
  maxChange: Int
  pokeathlonStat: NamedAPIResource
}

type MoveBattleStylePreference {
  lowHpPreference: Int
  highHpPreference: Int
  moveBattleStyle: NamedAPIResource
}

type PokeathlonStat {
  id: Int
  name: String
  names: [Name]
  affectingNatures: NaturePokeathlonStatAffectSets
}

type NaturePokeathlonStatAffectSets {
  increase: [NaturePokeathlonStatAffect]
  decrease: [NaturePokeathlonStatAffect]
}

type NaturePokeathlonStatAffect {
  maxChange: Int
  nature: NamedAPIResource
}

type Pokemon {
  id: Int
  name: String
  baseExperience: Int
  height: Int
  isDefault: Boolean
  order: Int
  weight: Int
  abilities: [PokemonAbility]
  forms: NamedAPIResource
  gameIndices: [VersionGameIndex]
  heldItems: [PokemonHeldItem]
  locationAreaEncounters: String
  moves: [PokemonMove]
  sprites: PokemonSprites
  species: NamedAPIResource
  stats: [PokemonStat]
  types: [PokemonType]
}

type PokemonAbility {
  isHidden: Boolean
  slot: Int
  ability: NamedAPIResource
}

type PokemonType {
  slot: Int
  type: NamedAPIResource
}

type PokemonHeldItem {
  item: NamedAPIResource
  versionDetails: [PokemonHeldItemVersion]
}

type PokemonHeldItemVersion {
  version: NamedAPIResource
  rarity: Int
}

type PokemonMove {
  move: NamedAPIResource
  versionGroupDetails: [PokemonMoveVersion]
}

type PokemonMoveVersion {
  moveLearnMethod: NamedAPIResource
  versionGroup: NamedAPIResource
  levelLearnedAt: Int
}

type PokemonStat {
  stat: NamedAPIResource
  effort: Int
  baseStat: Int
}

type PokemonSprites {
  frontDefault: String
  frontShiny: String
  frontFemale: String
  frontShinyFemale: String
  backDefault: String
  backShiny: String
  backFemale: String
  backShinyFemale: String
}

type LocationAreaEncounter {
  locationArea: NamedAPIResource
  versionDetails: [VersionEncounterDetail]
}

type PokemonColor {
  id: Int
  name: String
  names: [Name]
  pokemonSpecies: [NamedAPIResource]
}

type PokemonForm {
  id: Int
  name: String
  order: Int
  formOrder: Int
  isDefault: Boolean
  isBattleOnly: Boolean
  isMega: Boolean
  formName: String
  pokemon: NamedAPIResource
  sprites: PokemonFormSprites
  versionGroup: NamedAPIResource
  names: [Name]
  formNames: [Name]
}

type PokemonFormSprites {
  frontDefault: String
  frontShiny: String
  backDefault: String
  backShiny: String
}

type PokemonHabitat {
  id: Int
  name: String
  names: [Name]
  pokemonSpecies: [NamedAPIResource]
}

type PokemonShape {
  id: Int
  name: String
  awesomeName: [AwesomeName]
  names: [Name]
  pokemonSpecies: [NamedAPIResource]
}

type AwesomeName {
  awesomeName: String
  language: NamedAPIResource
}

type PokemonSpecies {
  id: Int
  name: String
  order: Int
  genderRate: Int
  captureRate: Int
  baseHappiness: Int
  isBaby: Boolean
  isLegendary: Boolean
  isMythical: Boolean
  hatchCounter: Int
  hasGenderDifferences: Boolean
  formsSwitchable: Boolean
  growthRate: NamedAPIResource
  pokedexNumbers: [PokemonSpeciesDexEntry]
  eggGroups: [NamedAPIResource]
  color: NamedAPIResource
  shape: NamedAPIResource
  evolvesFromSpecies: NamedAPIResource
  evolutionChain: APIResource
  habitat: NamedAPIResource
  generation: NamedAPIResource
  names: [Name]
  palParkEncounters: [PalParkEncounterArea]
  flavorTextEntries: [FlavorText]
  formDescriptions: [Description]
  genera: [Genus]
  varieties: [PokemonSpeciesVariety]
}

type Genus {
  genus: String
  language: NamedAPIResource
}

type PokemonSpeciesDexEntry {
  entryNumber: Int
  pokedex: NamedAPIResource
}

type PalParkEncounterArea {
  baseScore: Int
  rate: Int
  area: NamedAPIResource
}

type PokemonSpeciesVariety {
  isDefault: Boolean
  pokemon: NamedAPIResource
}

type Stat {
  id: Int
  name: String
  gameIndex: Int
  isBattleOnly: Boolean
  affectingMoves: MoveStatAffectSets
  affectingNatures: NatureStatAffectSets
  characteristics: [APIResource]
  moveDamageClass: NamedAPIResource
  names: [Name]
}

type MoveStatAffectSets {
  increase: [MoveStatAffect]
  decrease: [MoveStatAffect]
}

type MoveStatAffect {
  change: Int
  move: NamedAPIResource
}

type NatureStatAffectSets {
  increase: [NamedAPIResource]
  decrease: [NamedAPIResource]
}

type Type {
  id: Int
  name: String
  damageRelations: TypeRelations
  gameIndices: [GenerationGameIndex]
  generation: NamedAPIResource
  moveDamageClass: NamedAPIResource
  names: [Name]
  pokemon: [TypePokemon]
  moves: [NamedAPIResource]
}

type TypePokemon {
  slot: Int
  pokemon: NamedAPIResource
}

type TypeRelations {
  noDamageTo: [NamedAPIResource]
  halfDamageTo: [NamedAPIResource]
  doubleDamageTo: [NamedAPIResource]
  noDamageFrom: [NamedAPIResource]
  halfDamageFrom: [NamedAPIResource]
  doubleDamageFrom: [NamedAPIResource]
}
